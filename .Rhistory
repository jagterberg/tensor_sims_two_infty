source("misc.R")
tensor()
?tensor
?Rtensor
?rTensor
?as.tensor
C <- as.tensor(runif(3^3))
C
C <- array(runif(3^3),dim=c(3,3,3))
C <- as.tensor(C)
C
?rdirichlet
?rDirichlet
if(!require(gtools)) {
install.packages("gtools")
library(gtools)
}
?rdirichlet
Pi1 <- rdirichlet(300,c(1,1,1))
Pi1 <- rdirichlet(300-3,c(1,1,1))
Pi2 <- rdirichlet(300-3,c(1,1,1))
Pi3 <- rdirichlet(300-3,c(1,1,1))
Pi1
Pi1[1,]
Pi1 <- rbind(c(1,0,0),c(0,1,0),c(0,0,1),rdirichlet(300-3,c(1,1,1)))
Pi1
Pi1[1,]
purenodes <- c(1,rep(0,r-1))
#define core tensor:
r <- 3
C <- array(runif(3^3),dim=c(3,3,3))
C <- as.tensor(C)
# generate mixed-memberships
p <- 300
purenodes <- c(1,rep(0,r-1))
for(i in c(2:r)) {
newnode <- c( rep(0,(i-1)),1,rep(0,(r-i)))
purenodes <- rbind(purenodes,newnode)
}
purenodes
Pi1 <- rbind(purenodes,rdirichlet(p-r,rep(1,r)))
Pi2 <- rbind(purenodes,rdirichlet(p-r,rep(1,r)))
Pi3 <- rbind(purenodes,rdirichlet(p-r,rep(1,r)))
#true tensor: underlying r1 r2 r3 block model
T_true <- ttm(ttm(ttm(C,Pi1,m=1),Pi2,m=2),Pi3,m=3)
T1 <- k_unfold(T_true,1)
Utrue <- irlba(T1,3)$u
dim(T)
dim(T1)
dim(T_True)
dim(T_true)
#true tensor: underlying r1 r2 r3 block model
T_true <- ttm(ttm(ttm(C,Pi1,m=1),Pi2,m=2),Pi3,m=3)
T1 <- k_unfold(T_true,1)
Utrue1 <- irlba(T1,3)
Utrue1 <- irlba(T1,3,3)
is.na(T_true)
any(is.na(T_true))
T1 <- as.matrix(k_unfold(T_true,1))
T1 <- k_unfold(T_true,1)@data
Utrue1 <- irlba(T1,3,3)
irlba(T1,3,3)$d
set.seed(5152022)
source("misc.R")
if(!require(gtools)) {
install.packages("gtools")
library(gtools)
}
#define core tensor:
r <- 3
C <- array(runif(3^3),dim=c(3,3,3))
C <- as.tensor(C)
# generate mixed-memberships
p <- 100
purenodes <- c(1,rep(0,r-1))
for(i in c(2:r)) {
newnode <- c( rep(0,(i-1)),1,rep(0,(r-i)))
purenodes <- rbind(purenodes,newnode)
}
Pi1 <- rbind(purenodes,rdirichlet(p-r,rep(1,r)))
Pi2 <- rbind(purenodes,rdirichlet(p-r,rep(1,r)))
Pi3 <- rbind(purenodes,rdirichlet(p-r,rep(1,r)))
#true tensor: underlying r1 r2 r3 block model
T_true <- ttm(ttm(ttm(C,Pi1,m=1),Pi2,m=2),Pi3,m=3)
T1 <- k_unfold(T_true,1)@data
Utrue1 <- irlba(T1,3,3)$u
#generate noise
Z <- as.tensor(array(rnorm(p^3),dim=c(p,p,p)))
T_obs <- T_true + Z
?rnorm
#generate noise
sds <- runif(p^3)
Z <- as.tensor(array(rnorm(p^3,sd=sds),dim=c(p,p,p)))
T_obs <- T_true + Z
Uhats <- HOOI_dd(T_obs,r=c(3,3,3))
Uhats
Uhats[[1]]
Uhat1 <- Uhats[[1]]
W <- procrustes(Uhat1,U)
W <- procrustes(Uhat1,Utrue1)
Uhat <- Uhat1
U <- Utrue1
norms <- apply(Uhat %*% W-U,1,function(x){
sum(x^2)
})
norms
length(norms)
max(sqrt(norms))
set.seed(5152022)
source("misc.R")
if(!require(gtools)) {
install.packages("gtools")
library(gtools)
}
#define core tensor:
r <- 3
C <- array(runif(3^3),dim=c(3,3,3))
C <- as.tensor(C)
# generate mixed-memberships
p <- 100
purenodes <- c(1,rep(0,r-1))
for(i in c(2:r)) {
newnode <- c( rep(0,(i-1)),1,rep(0,(r-i)))
purenodes <- rbind(purenodes,newnode)
}
Pi1 <- rbind(purenodes,rdirichlet(p-r,rep(1,r)))
Pi2 <- rbind(purenodes,rdirichlet(p-r,rep(1,r)))
Pi3 <- rbind(purenodes,rdirichlet(p-r,rep(1,r)))
#true tensor: underlying r1 r2 r3 block model
T_true <- ttm(ttm(ttm(C,Pi1,m=1),Pi2,m=2),Pi3,m=3)
T1 <- k_unfold(T_true,1)@data
Utrue1 <- irlba(T1,3,3)$u
#generate noise
sds <- runif(p^3)
Z <- as.tensor(array(rnorm(p^3,sd=sds),dim=c(p,p,p)))
T_obs <- T_true + Z
Uhats <- HOOI_dd(T_obs,r=c(3,3,3))
Uhat1 <- Uhats[[1]]
val <- two_infty(Uhat1,Utrue1)
val
?foreach
set.seed(5152022)
source("misc.R")
numcores<- detectCores()
cl <- makeCluster(4,type = "FORK")
registerDoParallel(cl,numcores)
?foreach
?colnames
